// Code generated by xsd2go.xsl; DO NOT EDIT.
//go:build checkxsd

//  Written by: Ed Davidson (OCLC), Schema validated using XMLPad v3.0.2.1 (Build 07/05/2008) 
//  Updated by: Abhijeet Roy (OCLC), Version 2021-2 June 2022, Schema validated using Eclipse IDE Version: 2021-09 (4.21.0) 
//  ...................................... 
//  ISO 18626 "Inter Library Loan Protocol 
//  ...................................... 
// 	Purpose: XML schema for ILL protocol ISO 18626
// 	Dependencies: None
// 	Change History:
// 	    Version 2021-2 June 2022
// 	        Corrections to errors in 2021-1 XSD for the 2021 revision of standard.
// 	        Request
// 	            Updated requestHeader to header of type type_requestHeader
// 	            Changed serviceInfo/serviceType to type to type_serviceType
// 	        SupplyingAgencyMessage
// 	            Updated requestHeader to header of type type_supplyingAgencyMessageHeader
// 	            Added name attribute to retryInfo/serviceType and changed the type to type_serviceType
// 	            Added name attribute to deliveryInfo/serviceType and changed the type to type_serviceType
// 	        RequestingAgencyMessage
// 	            Updated requestHeader to header of type type_requestingAgencyMessageHeader
// 		Version 2021-1 January 2021 (aka version 1.3)
// 			Changes for the 2021 Revision of the standard
// 			NOTE: We now name XSDs after the publication year of the Revision of the standard plus a version number for minor revision of the schema for that version of the standard
// 			thus what would have been XSD Version "1_3_2021" is now named "2021-1"
// 			Request
// 				DIS: Updated Header
// 					Added ConsortialId
// 					Made SupplyingAgencyId optional (for transfer requests that don't require a supplier)
// 					Made MultipleItemRequestId optional (erroneously mandatory in previous XSD)
// 				FINAL: Replaced generic message Header structure with message specific headers as the headers have diverged since initial version of protocol
// 					requestHeader
// 					supplyingAgencyMessageHeader
// 					requestingAgencyMessageHeader
// 				BibliographicInfo
// 					Changed field sequence of BibliographicItemId to match the order of elements in the document
// 					Added AuthorId (to hold an ISNI (ISO-27729))
// 					Made Volume repeatable
// 				Updated SupplierInfo
// 					Restricted sortOrder to a non-negative value (0 ->)
// 				Updated RequestedDeliveryInfo
// 					Restricted sortOrder to a non-negative value (0 ->)
// 					Added deliveryMethod
// 					Added courierName
// 				Added Action=HoldReturn
// 			SupplyingAgencyMessage
// 				Added RetryInfo structure
// 				Moved OfferedCosts, RetryBefore, RetryAfter from MessageInfo to RetryInfo
// 				Updated  DeliveryInfo
// 					Renamed sentVia to deliveryMethod
// 					Renamed deliveredFormat to itemFormat
// 					Added URL
// 					Added address
// 					Added serviceType
// 					Added paymentMethod
// 				Added ShippingInfo structure
// 				Added Status=HoldReturn
// 				Added Status=ReleaseHoldReturn
// 			RequestingAgencyMessage
// 				Added Action = HoldReturn
// 				PhysicalAddress/Region changed from scheme/value pair to plain string
// 		Version 1.2 November 2017
// 			Changed in order to describe the 2017 Minor revision of the standard
// 			Added the following four new data elements
// 				header
// 					multipleItemRequestId
// 				serviceType
// 					requestSubType
// 					startDate
// 					endDate							
// 		Version 1.1 March 2014
// 			Changed the way enumerations were defined so that they would build correctly when using JAXB
// 			This file describes 2014 version of the standard
// 		Version 1.0 2014
// 			First Cut 
//  
package iso18626

import (
  "encoding/xml"
  utils "github.com/indexdata/go-utils/utils"
)


type ISO18626Message struct {
  XMLName xml.Name `xml:"ISO18626Message"`
  Request *Request `xml:"request,omitempty"`
  RequestConfirmation *RequestConfirmation `xml:"requestConfirmation,omitempty"`
  SupplyingAgencyMessage *SupplyingAgencyMessage `xml:"supplyingAgencyMessage,omitempty"`
  SupplyingAgencyMessageConfirmation *SupplyingAgencyMessageConfirmation `xml:"supplyingAgencyMessageConfirmation,omitempty"`
  RequestingAgencyMessage *RequestingAgencyMessage `xml:"requestingAgencyMessage,omitempty"`
  RequestingAgencyMessageConfirmation *RequestingAgencyMessageConfirmation `xml:"requestingAgencyMessageConfirmation,omitempty"`
  Version utils.PrefixAttr `xml:"version,attr"`
}


type Request struct {
  XMLName xml.Name `xml:"request"`
  Header TypeRequestHeader `xml:"header"`
  BibliographicInfo BibliographicInfo `xml:"bibliographicInfo"`
  PublicationInfo *PublicationInfo `xml:"publicationInfo,omitempty"`
  ServiceInfo ServiceInfo `xml:"serviceInfo"`
  SupplierInfo []SupplierInfo `xml:"supplierInfo,omitempty"`
  RequestedDeliveryInfo []RequestedDeliveryInfo `xml:"requestedDeliveryInfo,omitempty"`
  RequestingAgencyInfo *RequestingAgencyInfo `xml:"requestingAgencyInfo,omitempty"`
  PatronInfo *PatronInfo `xml:"patronInfo,omitempty"`
  BillingInfo *BillingInfo `xml:"billingInfo,omitempty"`
}


type RequestConfirmation struct {
  XMLName xml.Name `xml:"requestConfirmation"`
  ConfirmationHeader ConfirmationHeader `xml:"confirmationHeader"`
  ErrorData []ErrorData `xml:"errorData,omitempty"`
}


type SupplyingAgencyMessage struct {
  XMLName xml.Name `xml:"supplyingAgencyMessage"`
  Header TypeSupplyingAgencyMessageHeader `xml:"header"`
  MessageInfo MessageInfo `xml:"messageInfo"`
  StatusInfo StatusInfo `xml:"statusInfo"`
  RetryInfo *RetryInfo `xml:"retryInfo,omitempty"`
  DeliveryInfo *DeliveryInfo `xml:"deliveryInfo,omitempty"`
  ShippingInfo *ShippingInfo `xml:"shippingInfo,omitempty"`
  ReturnInfo *ReturnInfo `xml:"returnInfo,omitempty"`
}


type SupplyingAgencyMessageConfirmation struct {
  XMLName xml.Name `xml:"supplyingAgencyMessageConfirmation"`
  ConfirmationHeader ConfirmationHeader `xml:"confirmationHeader"`
  ReasonForMessage *TypeReasonForMessage `xml:"reasonForMessage,omitempty"`
  ErrorData []ErrorData `xml:"errorData,omitempty"`
}


type RequestingAgencyMessage struct {
  XMLName xml.Name `xml:"requestingAgencyMessage"`
  Header TypeRequestingAgencyMessageHeader `xml:"header"`
  Action TypeAction `xml:"action"`
  Note string `xml:"note,omitempty"`
}


type RequestingAgencyMessageConfirmation struct {
  XMLName xml.Name `xml:"requestingAgencyMessageConfirmation"`
  ConfirmationHeader ConfirmationHeader `xml:"confirmationHeader"`
  Action *TypeAction `xml:"action,omitempty"`
  ErrorData []ErrorData `xml:"errorData,omitempty"`
}

type Action struct {
  XMLName xml.Name `xml:"action"`
  TypeAction
}


type Address struct {
  XMLName xml.Name `xml:"address"`
  ElectronicAddress *ElectronicAddress `xml:"electronicAddress,omitempty"`
  PhysicalAddress *PhysicalAddress `xml:"physicalAddress,omitempty"`
}


type BibliographicItemId struct {
  XMLName xml.Name `xml:"bibliographicItemId"`
  BibliographicItemIdentifierCode TypeSchemeValuePair `xml:"bibliographicItemIdentifierCode"`
  BibliographicItemIdentifier string `xml:"bibliographicItemIdentifier"`
}


type BibliographicInfo struct {
  XMLName xml.Name `xml:"bibliographicInfo"`
  SupplierUniqueRecordId string `xml:"supplierUniqueRecordId,omitempty"`
  Title string `xml:"title,omitempty"`
  Author string `xml:"author,omitempty"`
  AuthorId string `xml:"authorId,omitempty"`
  Subtitle string `xml:"subtitle,omitempty"`
  SeriesTitle string `xml:"seriesTitle,omitempty"`
  Edition string `xml:"edition,omitempty"`
  TitleOfComponent string `xml:"titleOfComponent,omitempty"`
  AuthorOfComponent string `xml:"authorOfComponent,omitempty"`
  Volume []string `xml:"volume,omitempty"`
  Issue string `xml:"issue,omitempty"`
  PagesRequested string `xml:"pagesRequested,omitempty"`
  EstimatedNoPages string `xml:"estimatedNoPages,omitempty"`
  BibliographicItemId []BibliographicItemId `xml:"bibliographicItemId,omitempty"`
  Sponsor string `xml:"sponsor,omitempty"`
  InformationSource string `xml:"informationSource,omitempty"`
  BibliographicRecordId []BibliographicRecordId `xml:"bibliographicRecordId,omitempty"`
}


type BibliographicRecordId struct {
  XMLName xml.Name `xml:"bibliographicRecordId"`
  BibliographicRecordIdentifierCode TypeSchemeValuePair `xml:"bibliographicRecordIdentifierCode"`
  BibliographicRecordIdentifier string `xml:"bibliographicRecordIdentifier"`
}


type BillingInfo struct {
  XMLName xml.Name `xml:"billingInfo"`
  PaymentMethod *TypeSchemeValuePair `xml:"paymentMethod,omitempty"`
  MaximumCosts *TypeCosts `xml:"maximumCosts,omitempty"`
  BillingMethod *TypeSchemeValuePair `xml:"billingMethod,omitempty"`
  BillingName string `xml:"billingName,omitempty"`
  Address *Address `xml:"address,omitempty"`
}


type ConfirmationHeader struct {
  XMLName xml.Name `xml:"confirmationHeader"`
  SupplyingAgencyId *TypeAgencyId `xml:"supplyingAgencyId,omitempty"`
  RequestingAgencyId *TypeAgencyId `xml:"requestingAgencyId,omitempty"`
  Timestamp string `xml:"timestamp"`
  RequestingAgencyRequestId string `xml:"requestingAgencyRequestId,omitempty"`
  TimestampReceived string `xml:"timestampReceived"`
  MessageStatus TypeMessageStatus `xml:"messageStatus"`
}

type ConsortialId struct {
  XMLName xml.Name `xml:"consortialId"`
  TypeAgencyId
}

type CourierName struct {
  XMLName xml.Name `xml:"courierName"`
  TypeSchemeValuePair
}


type DeliveryInfo struct {
  XMLName xml.Name `xml:"deliveryInfo"`
  DateSent string `xml:"dateSent"`
  ItemId []string `xml:"itemId,omitempty"`
  URL string `xml:"URL,omitempty"`
  DeliveryMethod *TypeSchemeValuePair `xml:"deliveryMethod,omitempty"`
  Address *Address `xml:"address,omitempty"`
  SentToPatron bool `xml:"sentToPatron,omitempty"`
  LoanCondition []TypeSchemeValuePair `xml:"loanCondition,omitempty"`
  ItemFormat *TypeSchemeValuePair `xml:"itemFormat,omitempty"`
  ServiceType *TypeServiceType `xml:"serviceType,omitempty"`
  DeliveryCosts []TypeCosts `xml:"deliveryCosts,omitempty"`
  PaymentMethod *TypeSchemeValuePair `xml:"paymentMethod,omitempty"`
}

type DeliveryMethod struct {
  XMLName xml.Name `xml:"deliveryMethod"`
  TypeSchemeValuePair
}

type Edition struct {
  XMLName xml.Name `xml:"edition"`
  Text string `xml:",chardata"`
}


type ElectronicAddress struct {
  XMLName xml.Name `xml:"electronicAddress"`
  ElectronicAddressType TypeSchemeValuePair `xml:"electronicAddressType"`
  ElectronicAddressData string `xml:"electronicAddressData"`
}


type ErrorData struct {
  XMLName xml.Name `xml:"errorData"`
  ErrorType TypeErrorType `xml:"errorType"`
  ErrorValue string `xml:"errorValue,omitempty"`
}

type ItemFormat struct {
  XMLName xml.Name `xml:"itemFormat"`
  TypeSchemeValuePair
}

type LoanCondition struct {
  XMLName xml.Name `xml:"loanCondition"`
  TypeSchemeValuePair
}


type MessageInfo struct {
  XMLName xml.Name `xml:"messageInfo"`
  ReasonForMessage TypeReasonForMessage `xml:"reasonForMessage"`
  AnswerYesNo *TypeYesNo `xml:"answerYesNo,omitempty"`
  Note string `xml:"note,omitempty"`
  ReasonUnfilled *TypeSchemeValuePair `xml:"reasonUnfilled,omitempty"`
  ReasonRetry *TypeSchemeValuePair `xml:"reasonRetry,omitempty"`
}

type MultipleItemRequestId struct {
  XMLName xml.Name `xml:"multipleItemRequestId"`
  Text string `xml:",chardata"`
}


type PatronInfo struct {
  XMLName xml.Name `xml:"patronInfo"`
  PatronId string `xml:"patronId,omitempty"`
  Surname string `xml:"surname,omitempty"`
  GivenName string `xml:"givenName,omitempty"`
  PatronType *TypeSchemeValuePair `xml:"patronType,omitempty"`
  SendToPatron *TypeYesNo `xml:"sendToPatron,omitempty"`
  Address []Address `xml:"address,omitempty"`
}

type PaymentMethod struct {
  XMLName xml.Name `xml:"paymentMethod"`
  TypeSchemeValuePair
}


type PhysicalAddress struct {
  XMLName xml.Name `xml:"physicalAddress"`
  Line1 string `xml:"line1,omitempty"`
  Line2 string `xml:"line2,omitempty"`
  Locality string `xml:"locality,omitempty"`
  PostalCode string `xml:"postalCode,omitempty"`
  Region string `xml:"region,omitempty"`
  Country *TypeSchemeValuePair `xml:"country,omitempty"`
  //  ISO 3166-1 
}


type PublicationInfo struct {
  XMLName xml.Name `xml:"publicationInfo"`
  Publisher string `xml:"publisher,omitempty"`
  PublisherId string `xml:"publisherId,omitempty"`
  //  ISNI ISO-27729 
  PublicationType *TypeSchemeValuePair `xml:"publicationType,omitempty"`
  PublicationDate string `xml:"publicationDate,omitempty"`
  PlaceOfPublication string `xml:"placeOfPublication,omitempty"`
}


type RequestedDeliveryInfo struct {
  XMLName xml.Name `xml:"requestedDeliveryInfo"`
  SortOrder *SortOrder `xml:"sortOrder,omitempty"`
  Address *Address `xml:"address,omitempty"`
  DeliveryMethod *TypeSchemeValuePair `xml:"deliveryMethod,omitempty"`
  CourierName *TypeSchemeValuePair `xml:"courierName,omitempty"`
}

type TypeRequestHeader struct {
  SupplyingAgencyId *TypeAgencyId `xml:"supplyingAgencyId,omitempty"`
  RequestingAgencyId TypeAgencyId `xml:"requestingAgencyId"`
  ConsortialId *TypeAgencyId `xml:"consortialId,omitempty"`
  MultipleItemRequestId string `xml:"multipleItemRequestId,omitempty"`
  Timestamp string `xml:"timestamp"`
  RequestingAgencyRequestId string `xml:"requestingAgencyRequestId"`
  RequestingAgencyAuthentication *RequestingAgencyAuthentication `xml:"requestingAgencyAuthentication,omitempty"`
}


type RequestingAgencyAuthentication struct {
  XMLName xml.Name `xml:"requestingAgencyAuthentication"`
  AccountId string `xml:"accountId,omitempty"`
  SecurityCode string `xml:"securityCode,omitempty"`
}

type RequestingAgencyId struct {
  XMLName xml.Name `xml:"requestingAgencyId"`
  TypeAgencyId
}


type RequestingAgencyInfo struct {
  XMLName xml.Name `xml:"requestingAgencyInfo"`
  Name string `xml:"name,omitempty"`
  ContactName string `xml:"contactName,omitempty"`
  Address []Address `xml:"address,omitempty"`
}

type TypeRequestingAgencyMessageHeader struct {
  SupplyingAgencyId TypeAgencyId `xml:"supplyingAgencyId"`
  RequestingAgencyId TypeAgencyId `xml:"requestingAgencyId"`
  ConsortialId *TypeAgencyId `xml:"consortialId,omitempty"`
  Timestamp string `xml:"timestamp"`
  RequestingAgencyRequestId string `xml:"requestingAgencyRequestId"`
  SupplyingAgencyRequestId string `xml:"supplyingAgencyRequestId,omitempty"`
  RequestingAgencyAuthentication *RequestingAgencyAuthentication `xml:"requestingAgencyAuthentication,omitempty"`
}

type RequestingAgencyRequestId struct {
  XMLName xml.Name `xml:"requestingAgencyRequestId"`
  Text string `xml:",chardata"`
}


type ReturnInfo struct {
  XMLName xml.Name `xml:"returnInfo"`
  ReturnAgencyId *TypeAgencyId `xml:"returnAgencyId,omitempty"`
  Name string `xml:"name,omitempty"`
  PhysicalAddress *PhysicalAddress `xml:"physicalAddress,omitempty"`
}


type RetryInfo struct {
  XMLName xml.Name `xml:"retryInfo"`
  LoanCondition []TypeSchemeValuePair `xml:"loanCondition,omitempty"`
  Edition []string `xml:"edition,omitempty"`
  ItemFormat []TypeSchemeValuePair `xml:"itemFormat,omitempty"`
  Volume []string `xml:"volume,omitempty"`
  ServiceType *TypeServiceType `xml:"serviceType,omitempty"`
  ServiceLevel []TypeSchemeValuePair `xml:"serviceLevel,omitempty"`
  DeliveryMethod []TypeSchemeValuePair `xml:"deliveryMethod,omitempty"`
  CourierName []TypeSchemeValuePair `xml:"courierName,omitempty"`
  OfferedCosts []TypeCosts `xml:"offeredCosts,omitempty"`
  PaymentMethod []TypeSchemeValuePair `xml:"paymentMethod,omitempty"`
  RetryBefore string `xml:"retryBefore,omitempty"`
  RetryAfter string `xml:"retryAfter,omitempty"`
}


type ServiceInfo struct {
  XMLName xml.Name `xml:"serviceInfo"`
  RequestType *TypeRequestType `xml:"requestType,omitempty"`
  RequestSubType []TypeRequestSubType `xml:"requestSubType,omitempty"`
  RequestingAgencyPreviousRequestId string `xml:"requestingAgencyPreviousRequestId,omitempty"`
  ServiceType TypeServiceType `xml:"serviceType"`
  ServiceLevel *TypeSchemeValuePair `xml:"serviceLevel,omitempty"`
  ItemFormat *TypeSchemeValuePair `xml:"itemFormat,omitempty"`
  NeedBeforeDate string `xml:"needBeforeDate,omitempty"`
  CopyrightCompliance *TypeSchemeValuePair `xml:"copyrightCompliance,omitempty"`
  AnyEdition *TypeYesNo `xml:"anyEdition,omitempty"`
  //  Deprecated 
  PreferredEdition *TypePreferredEdition `xml:"preferredEdition,omitempty"`
  //  Recommended 
  LoanCondition []TypeSchemeValuePair `xml:"loanCondition,omitempty"`
  StartDate string `xml:"startDate,omitempty"`
  EndDate string `xml:"endDate,omitempty"`
  Note string `xml:"note,omitempty"`
}

type ServiceLevel struct {
  XMLName xml.Name `xml:"serviceLevel"`
  TypeSchemeValuePair
}


type ShippingInfo struct {
  XMLName xml.Name `xml:"shippingInfo"`
  CourierName *TypeSchemeValuePair `xml:"courierName,omitempty"`
  TrackingId []string `xml:"trackingId,omitempty"`
  Insurance *TypeYesNo `xml:"insurance,omitempty"`
  InsuranceThirdParty *TypeYesNo `xml:"insuranceThirdParty,omitempty"`
  ThirdPartyName string `xml:"thirdPartyName,omitempty"`
  InsuranceCosts []TypeCosts `xml:"insuranceCosts,omitempty"`
}


type SortOrder int64



type StatusInfo struct {
  XMLName xml.Name `xml:"statusInfo"`
  Status TypeStatus `xml:"status"`
  ExpectedDeliveryDate string `xml:"expectedDeliveryDate,omitempty"`
  DueDate string `xml:"dueDate,omitempty"`
  LastChange string `xml:"lastChange"`
}


type SupplierInfo struct {
  XMLName xml.Name `xml:"supplierInfo"`
  SortOrder *SortOrder `xml:"sortOrder,omitempty"`
  SupplierCode *TypeAgencyId `xml:"supplierCode,omitempty"`
  SupplierDescription string `xml:"supplierDescription,omitempty"`
  BibliographicRecordId *BibliographicRecordId `xml:"bibliographicRecordId,omitempty"`
  CallNumber string `xml:"callNumber,omitempty"`
  SummaryHoldings string `xml:"summaryHoldings,omitempty"`
  AvailabilityNote string `xml:"availabilityNote,omitempty"`
}

type SupplyingAgencyId struct {
  XMLName xml.Name `xml:"supplyingAgencyId"`
  TypeAgencyId
}

type TypeSupplyingAgencyMessageHeader struct {
  SupplyingAgencyId TypeAgencyId `xml:"supplyingAgencyId"`
  RequestingAgencyId TypeAgencyId `xml:"requestingAgencyId"`
  Timestamp string `xml:"timestamp"`
  RequestingAgencyRequestId string `xml:"requestingAgencyRequestId"`
  SupplyingAgencyRequestId string `xml:"supplyingAgencyRequestId,omitempty"`
}

type SupplyingAgencyRequestId struct {
  XMLName xml.Name `xml:"supplyingAgencyRequestId"`
  Text string `xml:",chardata"`
}

type Timestamp struct {
  XMLName xml.Name `xml:"timestamp"`
  Text string `xml:",chardata"`
}

type TimestampReceived struct {
  XMLName xml.Name `xml:"timestampReceived"`
  Text string `xml:",chardata"`
}

type Volume struct {
  XMLName xml.Name `xml:"volume"`
  Text string `xml:",chardata"`
}

type TypeAgencyId struct {
  AgencyIdType TypeSchemeValuePair `xml:"agencyIdType"`
  AgencyIdValue string `xml:"agencyIdValue"`
}

type TypeCosts struct {
  CurrencyCode TypeSchemeValuePair `xml:"currencyCode"`
  // ISO 4217 
  MonetaryValue float64 `xml:"monetaryValue"`
}

type TypeSchemeValuePair struct {
  Text string `xml:",chardata"`
  Scheme *utils.PrefixAttr `xml:"scheme,attr,omitempty"`
}

type TypeAction string

const TypeActionStatusRequest TypeAction = "StatusRequest"
const TypeActionReceived TypeAction = "Received"
const TypeActionCancel TypeAction = "Cancel"
const TypeActionRenew TypeAction = "Renew"
const TypeActionHoldReturn TypeAction = "HoldReturn"
const TypeActionShippedReturn TypeAction = "ShippedReturn"
const TypeActionShippedForward TypeAction = "ShippedForward"
const TypeActionNotification TypeAction = "Notification"
const TypeActionLost TypeAction = "Lost"

type TypeErrorType string

const TypeErrorTypeUnsupportedActionType TypeErrorType = "UnsupportedActionType"
const TypeErrorTypeUnsupportedReasonForMessageType TypeErrorType = "UnsupportedReasonForMessageType"
const TypeErrorTypeUnrecognisedDataElement TypeErrorType = "UnrecognisedDataElement"
const TypeErrorTypeUnrecognisedDataValue TypeErrorType = "UnrecognisedDataValue"
const TypeErrorTypeBadlyFormedMessage TypeErrorType = "BadlyFormedMessage"

type TypeMessageStatus string

const TypeMessageStatusOK TypeMessageStatus = "OK"
const TypeMessageStatusERROR TypeMessageStatus = "ERROR"

type TypePreferredEdition string

const TypePreferredEditionMostRecentEdition TypePreferredEdition = "MostRecentEdition"
const TypePreferredEditionThisEdition TypePreferredEdition = "ThisEdition"
const TypePreferredEditionAnyEdition TypePreferredEdition = "AnyEdition"

type TypeReasonForMessage string

const TypeReasonForMessageRequestResponse TypeReasonForMessage = "RequestResponse"
const TypeReasonForMessageStatusRequestResponse TypeReasonForMessage = "StatusRequestResponse"
const TypeReasonForMessageRenewResponse TypeReasonForMessage = "RenewResponse"
const TypeReasonForMessageCancelResponse TypeReasonForMessage = "CancelResponse"
const TypeReasonForMessageStatusChange TypeReasonForMessage = "StatusChange"
const TypeReasonForMessageNotification TypeReasonForMessage = "Notification"

type TypeRequestType string

const TypeRequestTypeNew TypeRequestType = "New"
const TypeRequestTypeRetry TypeRequestType = "Retry"
const TypeRequestTypeReminder TypeRequestType = "Reminder"

type TypeRequestSubType string

const TypeRequestSubTypeBookingRequest TypeRequestSubType = "BookingRequest"
const TypeRequestSubTypeMultipleItemRequest TypeRequestSubType = "MultipleItemRequest"
const TypeRequestSubTypePatronRequest TypeRequestSubType = "PatronRequest"
const TypeRequestSubTypeTransferRequest TypeRequestSubType = "TransferRequest"
const TypeRequestSubTypeSupplyingLibrarysChoice TypeRequestSubType = "SupplyingLibrarysChoice"

type TypeServiceType string

const TypeServiceTypeCopy TypeServiceType = "Copy"
const TypeServiceTypeLoan TypeServiceType = "Loan"
const TypeServiceTypeCopyOrLoan TypeServiceType = "CopyOrLoan"

type TypeStatus string

const TypeStatusRequestReceived TypeStatus = "RequestReceived"
const TypeStatusExpectToSupply TypeStatus = "ExpectToSupply"
const TypeStatusWillSupply TypeStatus = "WillSupply"
const TypeStatusLoaned TypeStatus = "Loaned"
const TypeStatusOverdue TypeStatus = "Overdue"
const TypeStatusRecalled TypeStatus = "Recalled"
const TypeStatusRetryPossible TypeStatus = "RetryPossible"
const TypeStatusUnfilled TypeStatus = "Unfilled"
const TypeStatusHoldReturn TypeStatus = "HoldReturn"
const TypeStatusReleaseHoldReturn TypeStatus = "ReleaseHoldReturn"
const TypeStatusCopyCompleted TypeStatus = "CopyCompleted"
const TypeStatusLoanCompleted TypeStatus = "LoanCompleted"
const TypeStatusCompletedWithoutReturn TypeStatus = "CompletedWithoutReturn"
const TypeStatusCancelled TypeStatus = "Cancelled"

type TypeYesNo string

const TypeYesNoY TypeYesNo = "Y"
const TypeYesNoN TypeYesNo = "N"

