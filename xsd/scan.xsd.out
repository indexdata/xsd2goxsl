// Code generated by xsd2go.xsl; DO NOT EDIT.
//go:build checkxsd

//     Search Web Services searchRetrieve Version 1.0
//     OASIS Standard
//     30 January 2013
//     Source: http://docs.oasis-open.org/search-ws/searchRetrieve/v1.0/os/schemas/
//     Copyright (c) OASIS Open 2013.  All Rights Reserved.
// Editor: Ray Denenberg, Library of Congress.  rden@loc.gov
// *****
package scan

import (
  "encoding/xml"
  xcql "github.com/indexdata/xsd2goxsl/xsd/xcql.xsd_test"
  diag "github.com/indexdata/xsd2goxsl/xsd/diagnostic.xsd_test"
)

type ScanResponse struct {
  XMLName xml.Name `xml:"scanResponse"`
  ScanResponseDefinition
}

type ScanResponseDefinition struct {
  Terms *TermsDefinition `xml:"terms,omitempty"`
  EchoedScanRequest *EchoedScanRequestDefinition `xml:"echoedScanRequest,omitempty"`
  Diagnostics *DiagnosticsDefinition `xml:"diagnostics,omitempty"`
  ExtraResponseData *ExtraDataDefinition `xml:"extraResponseData,omitempty"`
}

type DiagnosticsDefinition struct {
  Diagnostic []diag.Diagnostic `xml:"diagnostic,omitempty"`
}

type EchoedScanRequestDefinition struct {
  ScanClause string `xml:"scanClause"`
  XScanClause *xcql.SearchClauseDefinition `xml:"xScanClause,omitempty"`
  ResponsePosition uint64 `xml:"responsePosition,omitempty"`
  MaximumTerms uint64 `xml:"maximumTerms,omitempty"`
  HttpAccept string `xml:"httpAccept,omitempty"`
  Stylesheet string `xml:"stylesheet,omitempty"`
  ExtraRequestData *ExtraDataDefinition `xml:"extraRequestData,omitempty"`
}

type ExtraDataDefinition struct {
  XMLContent []byte   `xml:",innerxml,omitempty"`
}

type TermDefinition struct {
  Value string `xml:"value"`
  NumberOfRecords uint64 `xml:"numberOfRecords,omitempty"`
  DisplayTerm string `xml:"displayTerm,omitempty"`
  WhereInList *WhereInListDefinition `xml:"whereInList,omitempty"`
  RequestURL string `xml:"requestURL,omitempty"`
  ExtraTermData *ExtraDataDefinition `xml:"extraTermData,omitempty"`
}

type TermsDefinition struct {
  Term []TermDefinition `xml:"term,omitempty"`
}

type WhereInListDefinition string

const WhereInListDefinitionFirst WhereInListDefinition = "first"
const WhereInListDefinitionLast WhereInListDefinition = "last"
const WhereInListDefinitionOnly WhereInListDefinition = "only"
const WhereInListDefinitionInner WhereInListDefinition = "inner"

type Diagnostics struct {
  XMLName xml.Name `xml:"diagnostics"`
  DiagnosticsDefinition
}

type DisplayTerm struct {
  XMLName xml.Name `xml:"displayTerm"`
  Text string `xml:",chardata"`
}

type ExtraResponseData struct {
  XMLName xml.Name `xml:"extraResponseData"`
  ExtraDataDefinition
}

type EchoedScanRequest struct {
  XMLName xml.Name `xml:"echoedScanRequest"`
  EchoedScanRequestDefinition
}

type ExtraRequestData struct {
  XMLName xml.Name `xml:"extraRequestData"`
  ExtraDataDefinition
}

type ExtraTermData struct {
  XMLName xml.Name `xml:"extraTermData"`
  ExtraDataDefinition
}

type HttpAccept struct {
  XMLName xml.Name `xml:"httpAccept"`
  Text string `xml:",chardata"`
}

type MaximumTerms struct {
  XMLName xml.Name `xml:"maximumTerms"`
  Text uint64 `xml:",chardata"`
}

type NumberOfRecords struct {
  XMLName xml.Name `xml:"numberOfRecords"`
  Text uint64 `xml:",chardata"`
}

type ResponsePosition struct {
  XMLName xml.Name `xml:"responsePosition"`
  Text uint64 `xml:",chardata"`
}

type RequestURL struct {
  XMLName xml.Name `xml:"requestURL"`
  Text string `xml:",chardata"`
}

type ScanClause struct {
  XMLName xml.Name `xml:"scanClause"`
  Text string `xml:",chardata"`
}

type Stylesheet struct {
  XMLName xml.Name `xml:"stylesheet"`
  Text string `xml:",chardata"`
}

type Terms struct {
  XMLName xml.Name `xml:"terms"`
  TermsDefinition
}

type Term struct {
  XMLName xml.Name `xml:"term"`
  TermDefinition
}

type Value struct {
  XMLName xml.Name `xml:"value"`
  Text string `xml:",chardata"`
}

type WhereInList struct {
  XMLName xml.Name `xml:"whereInList"`
  WhereInListDefinition
}

type XScanClause struct {
  XMLName xml.Name `xml:"xScanClause"`
  xcql.SearchClauseDefinition
}

