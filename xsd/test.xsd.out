// Code generated by xsd2go.xsl; DO NOT EDIT.
//go:build checkxsd

//  Test schema for testing xsd2go.xsl
package family

import (
  "encoding/xml"
  utils "github.com/indexdata/go-utils/utils"
)


type Family struct {
  XMLName xml.Name `xml:"family"`
  Father *Adult `xml:"father,omitempty"`
  Mother *Adult `xml:"mother,omitempty"`
  Children []Children `xml:"children,omitempty"`
  FavChild struct {
    XMLName xml.Name `xml:"favChild"`
    FavChild Person `xml:"favChild"`
  }
  GrandmaMom *Adult `xml:"grandma_mom,omitempty"`
  GrandpaMom *Adult `xml:"grandpa_mom,omitempty"`
  GrandmaDad *Adult `xml:"grandma_dad,omitempty"`
  GrandpaDad *Adult `xml:"grandpa_dad,omitempty"`
  IncomeLevel IncomeLevel `xml:"incomeLevel"`
  Name utils.PrefixAttr `xml:"name,attr"`
}

type Father struct {
  XMLName xml.Name `xml:"father"`
  Adult
}

type Mother struct {
  XMLName xml.Name `xml:"mother"`
  Adult
}

type Adult struct {
  Person
  DrivingLicence bool `xml:"drivingLicence"`
}

type Person struct {
  Name string `xml:"name"`
  Surname string `xml:"surname"`
  Age int `xml:"age"`
  Height int `xml:"height"`
  Gender Gender `xml:"gender"`
  Interests []string `xml:"interests,omitempty"`
  FavColor string `xml:"favColor,omitempty"`
}

type Gender string

const GenderMALE Gender = "MALE"
const GenderFEMALE Gender = "FEMALE"

type ElemWithAttr struct {
  Text string `xml:",chardata"`
  Attr *utils.PrefixAttr `xml:"attr,attr,omitempty"`
}


type Children struct {
  XMLName xml.Name `xml:"children"`
  Child []Person `xml:"child,omitempty"`
}


type IncomeLevel string

const IncomeLevelHIGH IncomeLevel = "HIGH"
const IncomeLevelMEDIUM IncomeLevel = "MEDIUM"
const IncomeLevelLOW IncomeLevel = "LOW"

